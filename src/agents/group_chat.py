import asyncio
from autogen import (
    AssistantAgent,
    GroupChat,
    ConversableAgent,
    register_function,
    Agent, UserProxyAgent, GroupChatManager,
)
from autogen.coding import DockerCommandLineCodeExecutor
from agents.tools.github_tools import create_github_gist

from llm_config import GPT4Turbo_config
from agents.utils import render_template


class CodeGenGroupChat:
    def __init__(self):
        self.executor = DockerCommandLineCodeExecutor(
            image="python:3.11-slim",
            timeout=60,
            work_dir="output",
            stop_container=True,
            auto_remove=True
        )

        self.user_proxy = UserProxyAgent(
            name="user_proxy",
            description="User Proxy agent to handle sending of tasks to Agents",
            system_message="You will be responsible for executing any function calls.",
            max_consecutive_auto_reply=2,
            code_execution_config=False,
            human_input_mode="NEVER",
            is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),
        )

        self.planner = AssistantAgent(
            name="planner",
            description="This is a planner agent that always runs first. "
                        "This agent writes clear step by step plans for "
                        "the Programmer to use. ",
            system_message=render_template("planner.jinja"),
            human_input_mode="NEVER",
            max_consecutive_auto_reply=10,
            default_auto_reply="",
            llm_config={
                "config_list": [GPT4Turbo_config],
                "temperature": 0.9,
            },
        )

        self.programmer = AssistantAgent(
            name="programmer",
            description="This is the Programmer agent that never goes first. "
                        "This agent writes clean and efficient code, "
                        "and sends it to the Optimizer for testing and review",
            system_message=render_template("programmer.jinja"),
            human_input_mode="NEVER",
            max_consecutive_auto_reply=4,
            default_auto_reply="",
            llm_config={
                "config_list": [GPT4Turbo_config],
                "temperature": 0.1,
            },
        )

        self.optimizer = AssistantAgent(
            name="optimizer",
            description="This is an Optimizer agent that never goes first. "
                        "This agent writes clean and efficient code, "
                        "and only goes after the programmer. ",
            system_message=render_template("optimizer.jinja"),
            human_input_mode="NEVER",
            max_consecutive_auto_reply=8,
            default_auto_reply="TERMINATE",
            llm_config={
                "config_list": [GPT4Turbo_config],
                "temperature": 1,
            },
        )

        self.tester = ConversableAgent(
            name="Tester",
            description="This is an Tester agent that never goes first. "
                        "This agent test the code generated by the programmer, "
                        "along with the changes made by the optimizer, "
                        "and only goes after the programmer and optimizer. ",
            system_message=render_template("tester.jinja"),
            llm_config=False,
            human_input_mode="NEVER",
            code_execution_config={"executor": self.executor, "last_n_messages": 3},
        )

        self.check_in = AssistantAgent(
            name="Check-In",
            description="This is an Check-In agent that never goes first. "
                        "This agent submits the finalized code to GitHub "
                        "Gist. ",
            system_message=render_template("checkin.jinja"),
            human_input_mode="NEVER",
            max_consecutive_auto_reply=5,
            is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),
            llm_config={
                "config_list": [GPT4Turbo_config],
                "temperature": 0.1,
            },

        )

        self.groupchat = GroupChat(
            agents=[
                self.user_proxy,
                self.planner,
                self.programmer,
                self.optimizer,
                self.tester,
                self.check_in
            ],
            messages=[],
            max_round=20,
            speaker_selection_method="auto",
        )

        self.manager = GroupChatManager(
            name="manager",
            description="This is a manager agent that controls and directs other Agents. "
                        "The Manager strictly maintains the workflow order",
            system_message=render_template("manager.jinja"),
            groupchat=self.groupchat,
            human_input_mode="NEVER",
            max_consecutive_auto_reply=50,
            default_auto_reply="TERMINATE",
            llm_config={
                "config_list": [GPT4Turbo_config],
                "temperature": 0.1,
            },
        )

    def start(self, message: str):
        self.user_proxy.initiate_chat(
            self.manager, message=message
        )

    def get_agent_messages(self, agent: Agent, last_message: bool = False):
        if last_message:
            return self.user_proxy.last_message(agent)

        return self.user_proxy.chat_messages[agent]

    def get_summary_message(self, agent: Agent):
        return self.user_proxy.chat_messages_for_summary(agent)
